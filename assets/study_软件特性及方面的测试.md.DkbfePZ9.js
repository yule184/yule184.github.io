import{_ as i,c as t,o,a2 as s}from"./chunks/framework.ZQz07f7Q.js";const c=JSON.parse('{"title":"软件特性及方面的测试","description":"自动化测试","frontmatter":{"title":"软件特性及方面的测试","description":"自动化测试","date":"2025-10-06T00:00:00.000Z","tags":["软件测试"],"category":"essays"},"headers":[],"relativePath":"study/软件特性及方面的测试.md","filePath":"study/软件特性及方面的测试.md","lastUpdated":null}'),r={name:"study/软件特性及方面的测试.md"};function n(e,l,a,p,g,u){return o(),t("div",null,[...l[0]||(l[0]=[s('<p>对于一些大规模的复杂软件系统，针对软件运行效率的测试非常重要</p><h1 id="_4-1-压力-强度-测试-stress-testing" tabindex="-1">4.1 压力（强度）测试 Stress testing <a class="header-anchor" href="#_4-1-压力-强度-测试-stress-testing" aria-label="Permalink to &quot;4.1 压力（强度）测试 Stress testing&quot;">​</a></h1><p>压力测试是在强负载（大数据量、大量并发用户等）下的测试，查看应用系统在峰值使用情况下操作行为，从而有效地发现系统的某项功能隐患、系统是否具有良好的容错能力和可恢复能力。</p><p>压力测试可分为：</p><ol><li>稳定性压力测试：高负载下的长时间（如24小时以上）测试</li><li>破坏性压力测试：极限负载情况下导致系统崩溃的测试</li></ol><p>压力测试通过确定一个系统的瓶颈或者不能接收的性能点，来获得系统能提供的最大的服务级别的测试。通俗地讲，压力测试是为了发现在什么条件下您的应用程序的性能会变得不可接受。</p><p>实例： 在一个系统内，仅有一个用户登录使用相同的操作，对不同的数据量进行测试。记录下数据量和对应的资源占用率，响应时间。</p><ul><li>接收大数据量的文件</li><li>大数据量的查询统计</li><li>大数据量的计算</li><li>多客户同时进行操作</li><li>长时间进行操作</li></ul><p>通过模拟负载，使系统在<strong>负载饱和或资源匮乏</strong>的状态下运行，检测系统在<strong>极限情况下</strong>的表现，了解系统的<strong>稳定性</strong>，明确系统在<strong>极端环境和压力</strong>下的表现，并发现系统在某些功能方面的隐患。</p><p>特点：超负载条件、系统崩溃评估、健壮性分析、瓶颈识别</p><h1 id="_4-2-负载测试-load-testing" tabindex="-1">4.2 负载测试 Load testing <a class="header-anchor" href="#_4-2-负载测试-load-testing" aria-label="Permalink to &quot;4.2 负载测试 Load testing&quot;">​</a></h1><p>Load testing（负载测试），通过测试系统在<strong>资源超负荷情况</strong>下的表现，以发现设计上的错误或验证系统的负载能力。是系统承担不同的工作负载，评估不同负载对系统行为、以及持续正常运行能力的影响。</p><p><strong>方式</strong>：使测试对象<strong>承担不同的工作量</strong>，以评测和评估测试对象在不同工作量条件下的<strong>性能行为</strong>，以及持续正常运行的能力。</p><p><strong>目标</strong>：确定并确保系统在超出最大预期工作量的情况下仍能正常运行。同时评估性能特征：如响应时间、事务处理速率和其他与时间相关的方面。</p><p>例如：测试一个 Web 站点在大量的负荷下，何时系统的响应会退化或失败，以发现设计上的错误或验证系统的负载能力。</p><ul><li><em>Realistic Loads</em>: 基于系统访问的历史数据来设计负载 <ul><li>有助于反映用户的真实行为、并收集用户主观反馈数据，但难于扩展</li></ul></li><li><em>Fault-Inducing Loads</em>: 针对系统特定的可能出错情况来设计负载 (e.g., memory leaks, incorrect dynamic memory allocation) <ul><li>易于自动生成大量请求 (LoadRunner 等测试工具)，但需要对工具进行合适的配置、且难于分析系统的特定行为</li></ul></li></ul><p>负载测试通常设计以下几个方面：用户模拟、性能指标、瓶颈识别、可扩展性验证</p><p><strong>软件老化：</strong> 软件系统长时间运行中出现的可用资源不足、性能下降、失效率增加等现象（长时间运行后性能下降）</p><ul><li>通常是由于软件系统中的错误累计、或系统资源的消耗和占用造成的</li><li>通过长时间提供大量工作负载使软件老化缺陷尽快暴露出来</li></ul><h1 id="_4-3-容量测试-volume-testing" tabindex="-1">4.3 容量测试 Volume testing <a class="header-anchor" href="#_4-3-容量测试-volume-testing" aria-label="Permalink to &quot;4.3 容量测试 Volume testing&quot;">​</a></h1><p><strong>容量：</strong> 可以看作系统性能指标中一个特定环境下的一个特定性能指标，即设定的界限或极限值。</p><p>容量测试<strong>目的</strong>：通过测试预先分析出反映软件系统应用特征的某项指标的极限值（如最大并发用户数、数据库记录数等），系统在其极限值状态下没有出现任何软件故障或还能保持主要功能正常运行。</p><p>容量测试还将确定测试对象在给定时间内能够持续处理的最大负载或工作量。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>软件容量测试的作用：</p><ol><li>让软件开发商或用户了解该软件系统的承载能力或提供服务的能力。如某个电子商务网站所能承受的、同时进行交易或结算的在线用户数。</li><li>知道了系统的实际容量，如果不能满足设计要求，就应该寻求新的技术解决方案，以提高系统的容量。</li><li>有了对软件负载的准确预测，就会对软件系统在实际使用中的性能状况充满信心，同时也可以帮助用户经济地规划应用系统，优化系统的部署</li></ol></div><p>检测系统在<strong>大数据量或大量用户</strong>下的表现，容量测试通常和数据库有关，通常仅关注大容量，而不表现实际的作用。</p><p><strong>特点：</strong> 最大负载识别、资源使用监控、性能优化、提升系统能力。</p><p>容量测试通常在开发环境和生产环境之间进行，以确保系统在实际使用中的可扩展性和稳定性。</p><h1 id="_4-4-性能测试" tabindex="-1">4.4 性能测试 <a class="header-anchor" href="#_4-4-性能测试" aria-label="Permalink to &quot;4.4 性能测试&quot;">​</a></h1><p>性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试，综合评估系统的性能指标。</p><p>验证软件系统<strong>是否能够达到用户提出的性能指标</strong>，同时发现软件系统中存在的性能瓶颈，通过不断调整、以及重复运行测试来改进系统性能。</p><p>性能测试通常包括以下几个方面：响应时间、吞吐量、资源利用率、稳定性和可靠性、负载测试与压力测试。</p><ul><li>能力指标：成功率、并发用户数量、数据处理量</li><li>时间指标：响应时间</li><li>资源指标：CPU使用率、数据库死锁</li><li>扩展性指标：服务级、应用级、数据库</li><li>稳定性指标：稳定运行时间、内存泄漏</li><li>可用性指标：流控机制可用性、负载策略可用性</li></ul><p>为什么进行性能测试？</p><ol><li><strong>验证软件系统是否能够达到用户提出的性能指标</strong>，同时<strong>发现软件系统</strong>中存在的<strong>性能瓶颈</strong>，优化软件，最后起到优化系统的目的。测试中得到的负荷和响应时间数据可以被用于验证所计划的模型的能力，并帮助作出决策。</li><li><strong>识别体系中的弱点</strong>：受控的负荷可以被增加到一个极端的水平，并突破它，从而修复体系的瓶颈或薄弱的地方。</li><li><strong>系统调优</strong>：重复运行测试，验证调整系统的活动得到了预期的结果，从而改进性能。检测软件中的问题：长时间的测试执行可导致程序发生由于内存泄露引起的失败，揭示程序中的隐含的问题或冲突。</li><li><strong>验证稳定性（resilience）可靠性（reliability）</strong>：在一个生产负荷下执行测试一定的时间是评估系统稳定性和可靠性是否满足要求的唯一方法。</li></ol><p>性能测试包括负载测试、强度测试、容量测试等。</p><p>性能测试<strong>三个方面</strong>：应用在客户端性能的测试、应用在网络上性能的测试、应用在服务器上性能的测试</p><p>性能测试的<strong>步骤</strong>：</p><ol><li>制定目标和分析系统</li><li>选择测试度量的方法</li><li>学习相关技术和工具</li><li>制定评估标准</li><li>设计测试用例</li><li>运行测试用例</li><li>分析测试结果</li></ol><p><strong>压力测试可以被看作是负载测试的一种</strong>，即高负载下的负载测试，或者说压力测试采用负载测试技术。通过压力测试，可以更快地发现内存泄漏问题，还可以更快地发现影响系统稳定性的问题。</p><p>负载测试是为了发现系统的性能问题，需要通过系统性能特性或行为来发现问题，从而为性能改进提供帮助，从这个意义看，<strong>负载测试可以看作性能测试的一部分</strong>。</p><h1 id="_4-5-可靠性测试" tabindex="-1">4.5 可靠性测试 <a class="header-anchor" href="#_4-5-可靠性测试" aria-label="Permalink to &quot;4.5 可靠性测试&quot;">​</a></h1><p><strong>可靠性测试</strong>是在给被测试系统加载<strong>一定业务压力</strong>的情况下，使系统运行一段时间，以此来测试系统是否<strong>稳定，<strong>通过系统性的测试方法评估软件的可</strong>靠性程度</strong>。</p><p>软件可靠性包括三个因素：<strong>规定的时间、规定的环境条件、规定的功能</strong>。软件可靠性是指在规定的时间和规定的环境下，完成规定功能的能力。</p><p>测试方法：</p><ol><li>对构成软件的各个组件进行压力测试</li><li>使用集中压力测试</li><li>使用真实环境测试</li><li>使用随机破坏测试</li></ol><p>Failure Intensity：单位时间内的失效数</p><p>MTTF (Mean Time To Failure)：平均失效时间</p><p>MTTR (Mean Time To Repair)：平均修复时间</p><p>MTBF (Mean Time Between Failures)：平均失效间隔</p><p>Availability (可用性) = MTTF / MTBF</p><ul><li><strong>基于操作剖面的测试</strong><ul><li><strong>操作剖面</strong>: 描述用户如何使用软件的一种技术，是一系列操作及其出现概率的集合</li><li>如果软件系统运行过程中某几个操作序列运行频率高，而且这几个操作的可靠性也高，那么软件的可靠性相对就较高</li><li>通过构建软件系统的操作剖面，可以有效地指导软件可靠性测试，合理分配测试资源，提高测试效率 (使经常使用的操作得到更多测试)</li></ul></li><li><strong>软件可靠性工程过程</strong><ul><li>定义软件失效强度目标(Failure Intensity Object)</li><li>开发操作剖面</li><li>设计测试用例执行测试</li><li>应用失效数据 <ul><li>伴随缺陷的不断移除，追踪软件的而可靠性增长</li><li>借助可靠性验证图（基于合适的可靠性模型）判断待测软件是否达到预定的可靠性程度</li></ul></li></ul></li></ul><p>过程：</p><ol><li>定义测试目标</li><li>环境准备</li><li>设计测试用例</li><li>执行测试</li><li>数据分析</li><li>优化和迭代</li></ol><h1 id="_4-6-安全性测试-security-testing" tabindex="-1">4.6 安全性测试 Security testing <a class="header-anchor" href="#_4-6-安全性测试-security-testing" aria-label="Permalink to &quot;4.6 安全性测试 Security testing&quot;">​</a></h1><p><strong>安全性（security）测试</strong>：是指在测试软件系统中危险防止和危险处理设施进行的测试，以验证其是否有效。</p><ul><li>由于社会对个人隐私的日益关注,许多软件都有特别的安全性目标. 安全性测试是设计测试用例来突破程序安全检查的过程.</li></ul><p>例如：设计测试用例规避内存保护机制, 破坏数据库系统的数据安全, 聊天工具,电子商务等系统的安全性问题.</p><h2 id="安全性测试的工作内容" tabindex="-1">安全性测试的工作内容： <a class="header-anchor" href="#安全性测试的工作内容" aria-label="Permalink to &quot;安全性测试的工作内容：&quot;">​</a></h2><ol><li>全面检验软件在软件需求规格说明中规定的防止危险状态措施的有效性和在每一个危险状态下的反应；</li><li>对软件设计中用于提高安全性的结构、算法、容错、冗余、中断处理等方案，进行针对性测试；</li><li>在异常条件下测试软件，以表明不会因可能的单个或多个输入错误而导致不安全状态。</li><li>用错误的安全性关键操作进行测试，以验证系统对这些操作错误的反应；</li><li>对安全性关键的软件单元和软件部件，要单独进行加强的测试，以确认其满足安全性需求。</li></ol><h2 id="安全性测试方法" tabindex="-1">安全性测试方法 <a class="header-anchor" href="#安全性测试方法" aria-label="Permalink to &quot;安全性测试方法&quot;">​</a></h2><p><strong>1. 功能验证</strong></p><p>功能验证是采用软件测试当中的黑盒测试方法,对涉及安全的软件功能,如：用户管理模块，权限管理，加密系统，认证系统等进行测试，主要验证上述功能是否有效。</p><p><strong>2. 漏洞扫描</strong></p><p>安全漏洞扫描主要是借助于特定的漏洞扫描器完成的。通过使用漏洞扫描器，系统管理员能够发现系统存在的安全漏洞，从而在系统安全中及时修补漏洞的措施。一般漏洞扫描分为两种类型:主机漏洞扫描器是指在系统本地运行检测系统漏洞的程序。网络漏洞扫描器是指基于网络远程检测目标网络和主机系统漏洞的程序。</p><p><strong>3. 模拟攻击</strong></p><p>对于安全测试来说，模拟攻击测试是一组特殊的极端的测试方法，我们以模拟攻击来验证软件系统的安全防护能力</p><p>系统性安全测试的内容：应用程序安全测试、操作系统安全测试、数据库安全测试、IIS服务器安全测试、网络环境安全测试</p>',67)])])}const _=i(r,[["render",n]]);export{c as __pageData,_ as default};
