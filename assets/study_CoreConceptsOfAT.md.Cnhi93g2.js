import{_ as l,c as t,o as i,a2 as o}from"./chunks/framework.ZQz07f7Q.js";const s="/assets/CyclicalityParallelism.DVx5CCz3.png",r="/assets/Vmodel.Bxa4EqsK.png",e="/assets/Wmodel.v9uNgXAr.png",n="/assets/Xmodel.PHObl08d.png",c="/assets/SEprocess.JKtwJoBN.png",q=JSON.parse('{"title":"软件测试核心概念","description":"","frontmatter":{},"headers":[],"relativePath":"study/CoreConceptsOfAT.md","filePath":"study/CoreConceptsOfAT.md","lastUpdated":null}'),h={name:"study/CoreConceptsOfAT.md"};function d(u,a,g,m,p,b){return i(),t("div",null,[...a[0]||(a[0]=[o('<h1 id="软件测试核心概念" tabindex="-1">软件测试核心概念 <a class="header-anchor" href="#软件测试核心概念" aria-label="Permalink to &quot;软件测试核心概念&quot;">​</a></h1><h2 id="_1-什么是软件质量" tabindex="-1">1. 什么是软件质量 <a class="header-anchor" href="#_1-什么是软件质量" aria-label="Permalink to &quot;1. 什么是软件质量&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">定义</p><p><strong>软件质量</strong>是一个包含多个属性的、可度量的多维度的量，其中有些属性比另外一些属性重要。</p></div><ul><li>分为<strong>静态质量属性</strong>和<strong>动态质量属性</strong></li></ul><hr><h2 id="_2-什么是软件缺陷-它具有哪些危害-如何管理" tabindex="-1">2. 什么是软件缺陷？它具有哪些危害，如何管理？ <a class="header-anchor" href="#_2-什么是软件缺陷-它具有哪些危害-如何管理" aria-label="Permalink to &quot;2. 什么是软件缺陷？它具有哪些危害，如何管理？&quot;">​</a></h2><h3 id="软件缺陷的定义" tabindex="-1">软件缺陷的定义： <a class="header-anchor" href="#软件缺陷的定义" aria-label="Permalink to &quot;软件缺陷的定义：&quot;">​</a></h3><details class="details custom-block"><summary>点击查看5条定义标准</summary><ol><li>软件未达到产品说明书中已经标明的功能</li><li>软件出现了产品说明书中指明不会出现的错误</li><li>软件未达到产品说明书中虽未指出但应当达到的目标</li><li>软件功能超出了产品说明书中指明的范围</li><li>软件测试人员认为软件难以理解、不易使用，或者最终用户认为该软件使用效果不良</li></ol></details><div class="warning custom-block"><p class="custom-block-title">重要发现</p><p>软件缺陷修复的代价：随着整个开发过程的时间推移，更正缺陷或修复问题的费用呈<strong>几何级数增长</strong>。</p></div><h3 id="缺陷管理流程" tabindex="-1">缺陷管理流程： <a class="header-anchor" href="#缺陷管理流程" aria-label="Permalink to &quot;缺陷管理流程：&quot;">​</a></h3><ol><li><strong>缺陷预防</strong></li><li><strong>缺陷发现</strong>（软件测试的主要目的）</li><li>缺陷记录和报告</li><li>缺陷分类和跟踪</li><li>缺陷处理</li><li>缺陷预测</li></ol><hr><h2 id="_3-什么是软件测试" tabindex="-1">3. 什么是软件测试 <a class="header-anchor" href="#_3-什么是软件测试" aria-label="Permalink to &quot;3. 什么是软件测试&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">官方定义</p><p>使用人工或自动的手段来运行或测定某个软件系统的过程，其目的在于检验软件是否满足规定的需求或弄清预期结果和实际结果之间的差别。</p></div><p>测试是一个或多个测试用例的结合。测试活动有两种结果：</p><ul><li>✅ 找出缺陷和故障</li><li>✅ 显示软件执行正确</li></ul><hr><h2 id="_4-测试的普遍性" tabindex="-1">4. 测试的普遍性 <a class="header-anchor" href="#_4-测试的普遍性" aria-label="Permalink to &quot;4. 测试的普遍性&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">跨行业应用</p><p>在各个领域都需要测试：教育、建筑、制造业、软件、农业、医疗等各行各业。</p></div><p>应用场景：Shopping, Education, Produce, Social communication, Academic, Industrial</p><hr><h2 id="_5-软件测试的种类" tabindex="-1">5. 软件测试的种类 <a class="header-anchor" href="#_5-软件测试的种类" aria-label="Permalink to &quot;5. 软件测试的种类&quot;">​</a></h2><details class="details custom-block"><summary>分类体系概览</summary><ul><li><strong>按照测试用例设计方法</strong>：白盒测试 vs 黑盒测试</li><li><strong>按照测试策略和过程</strong>：单元测试、集成测试、系统测试、验证测试、确认测试</li><li><strong>不同阶段的测试</strong>（9种）</li><li><strong>不同应用软件的测试</strong>（20+种）</li><li><strong>不同测试技术</strong>（30+种）</li><li><strong>不同方面测试</strong>（30+种）</li></ul></details><hr><h2 id="_6-软件测试的关键问题是什么" tabindex="-1">6. 软件测试的关键问题是什么？ <a class="header-anchor" href="#_6-软件测试的关键问题是什么" aria-label="Permalink to &quot;6. 软件测试的关键问题是什么？&quot;">​</a></h2><h3 id="软件生命周期8阶段" tabindex="-1">软件生命周期8阶段： <a class="header-anchor" href="#软件生命周期8阶段" aria-label="Permalink to &quot;软件生命周期8阶段：&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">瀑布模型阶段</p><p>制定计划 → 需求分析定义 → 软件设计 → 程序编码 → 软件测试 → 软件运行 → 软件维护 → 软件停用</p></div><h3 id="四个关键方面" tabindex="-1">四个关键方面： <a class="header-anchor" href="#四个关键方面" aria-label="Permalink to &quot;四个关键方面：&quot;">​</a></h3><ol><li><strong>测试由谁来执行</strong></li><li><strong>测试什么</strong></li><li><strong>什么时候进行测试</strong></li><li><strong>怎样进行测试</strong></li></ol><hr><h2 id="_7-软件测试的对象是什么" tabindex="-1">7. 软件测试的对象是什么 <a class="header-anchor" href="#_7-软件测试的对象是什么" aria-label="Permalink to &quot;7. 软件测试的对象是什么&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">测试对象范围</p><p>软件开发过程中所产生的所有文档和代码都是测试对象：</p><ul><li>需求规格说明</li><li>概要设计规格说明</li><li>详细设计规格说明</li><li>源程序</li></ul></div><hr><h2 id="_8-软件测试的停止准则有哪些" tabindex="-1">8. 软件测试的停止准则有哪些 <a class="header-anchor" href="#_8-软件测试的停止准则有哪些" aria-label="Permalink to &quot;8. 软件测试的停止准则有哪些&quot;">​</a></h2><details class="details custom-block"><summary>五类停止标准</summary><p><strong>第一类</strong>：测试超过了预期时间<br><strong>第二类</strong>：执行了所有测试用例但未发现故障<br><strong>第三类</strong>：使用特定测试用例设计方案作为判断基础<br><strong>第四类</strong>：查出预定数目的故障<br><strong>第五类</strong>：根据单位时间内查出故障的数量决定</p></details><hr><h2 id="_9-软件测试的周期性和并行性" tabindex="-1">9. 软件测试的周期性和并行性 <a class="header-anchor" href="#_9-软件测试的周期性和并行性" aria-label="Permalink to &quot;9. 软件测试的周期性和并行性&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">测试-改错循环</p><p><strong>周期性</strong>：测试 → 改错 → 再测试 → 再改错</p></div><p><img src="'+s+'" alt="软件测试的周期性"></p><hr><h2 id="_10-软件测试的目的、意义和原则" tabindex="-1">10. 软件测试的目的、意义和原则 <a class="header-anchor" href="#_10-软件测试的目的、意义和原则" aria-label="Permalink to &quot;10. 软件测试的目的、意义和原则&quot;">​</a></h2><h3 id="目的" tabindex="-1">目的 <a class="header-anchor" href="#目的" aria-label="Permalink to &quot;目的&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">双重目标</p><ul><li><strong>发现错误</strong>：测试是程序的执行过程，目的在于发现错误</li><li><strong>验证需求</strong>：检查系统是否满足需求要求</li></ul></div><div class="warning custom-block"><p class="custom-block-title">局限性</p><p>测试不能证明程序的正确性，除非仅处理有限种情况</p></div><h3 id="意义" tabindex="-1">意义 <a class="header-anchor" href="#意义" aria-label="Permalink to &quot;意义&quot;">​</a></h3><ul><li><strong>对消费者而言</strong>：保障软件质量</li><li><strong>对生产者而言</strong>：提升产品竞争力</li></ul><hr><h2 id="_11-软件测试的未来发展趋势" tabindex="-1">11. 软件测试的未来发展趋势 <a class="header-anchor" href="#_11-软件测试的未来发展趋势" aria-label="Permalink to &quot;11. 软件测试的未来发展趋势&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">未来发展方向</p><p>软件测试自动化 · 测试技术智能化 · 测试方法工具化 · 测试工具服务化 · 测试理论系统化 · 测试手段多样化 · 测试过程标准化 · 测试人员专业化 · 测试部门独立化 · 测试管理全面化 · 测试对象精细化</p></div><hr><h2 id="_12-软件测试在软件工程中的位置" tabindex="-1">12. 软件测试在软件工程中的位置 <a class="header-anchor" href="#_12-软件测试在软件工程中的位置" aria-label="Permalink to &quot;12. 软件测试在软件工程中的位置&quot;">​</a></h2><details class="details custom-block"><summary>开发模型中的测试</summary><ol><li><strong>大棒开发法</strong></li><li><strong>边写边改法</strong></li><li><strong>瀑布法</strong></li><li><strong>快速原型法</strong></li><li><strong>螺旋模式法</strong></li><li><strong>敏捷开发模式</strong></li></ol></details><hr><h2 id="_13-软件测试的模型" tabindex="-1">13. 软件测试的模型 <a class="header-anchor" href="#_13-软件测试的模型" aria-label="Permalink to &quot;13. 软件测试的模型&quot;">​</a></h2><h3 id="v模型" tabindex="-1">V模型 <a class="header-anchor" href="#v模型" aria-label="Permalink to &quot;V模型&quot;">​</a></h3><p><img src="'+r+'" alt="V模型"></p><h3 id="w模型" tabindex="-1">W模型 <a class="header-anchor" href="#w模型" aria-label="Permalink to &quot;W模型&quot;">​</a></h3><p><img src="'+e+'" alt="W模型"></p><h3 id="x模型" tabindex="-1">X模型 <a class="header-anchor" href="#x模型" aria-label="Permalink to &quot;X模型&quot;">​</a></h3><p><img src="'+n+'" alt="X模型"></p><hr><h2 id="_14-软件测试的过程-测试信息流程" tabindex="-1">14. 软件测试的过程（测试信息流程） <a class="header-anchor" href="#_14-软件测试的过程-测试信息流程" aria-label="Permalink to &quot;14. 软件测试的过程（测试信息流程）&quot;">​</a></h2><p><img src="'+c+'" alt="测试信息流程"></p><hr><h2 id="_15-软件测试的研究进展" tabindex="-1">15. 软件测试的研究进展 <a class="header-anchor" href="#_15-软件测试的研究进展" aria-label="Permalink to &quot;15. 软件测试的研究进展&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">重要研究时间点</p><ul><li>2000 FSE</li><li>2007 FSE</li><li>2014 Changhai Nie</li></ul></div><hr><h2 id="_16-软件测试作为一种职业和科学" tabindex="-1">16. 软件测试作为一种职业和科学 <a class="header-anchor" href="#_16-软件测试作为一种职业和科学" aria-label="Permalink to &quot;16. 软件测试作为一种职业和科学&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">优秀测试员素质</p><p>探索精神 · 故障排除能手 · 不懈努力 · 创造性 · 追求完美 · 判断准确 · 老练稳重 · 说服力</p></div><hr><h2 id="_17-软件测试的工具分类" tabindex="-1">17. 软件测试的工具分类 <a class="header-anchor" href="#_17-软件测试的工具分类" aria-label="Permalink to &quot;17. 软件测试的工具分类&quot;">​</a></h2><details class="details custom-block"><summary>测试工具类型</summary><ul><li><strong>测试管理工具</strong></li><li><strong>自动化功能测试工具</strong></li><li><strong>性能测试工具</strong></li><li><strong>单元测试工具</strong></li><li><strong>白盒测试工具</strong></li><li><strong>测试用例设计工具</strong></li></ul></details><hr><h2 id="_18-软件测试的管理框架" tabindex="-1">18. 软件测试的管理框架 <a class="header-anchor" href="#_18-软件测试的管理框架" aria-label="Permalink to &quot;18. 软件测试的管理框架&quot;">​</a></h2><h3 id="时间维-全过程管理" tabindex="-1">时间维：全过程管理 <a class="header-anchor" href="#时间维-全过程管理" aria-label="Permalink to &quot;时间维：全过程管理&quot;">​</a></h3><ul><li>测试计划管理</li><li>测试设计管理</li><li>测试执行管理</li><li>测试结果管理</li></ul><h3 id="空间维-全方位管理" tabindex="-1">空间维：全方位管理 <a class="header-anchor" href="#空间维-全方位管理" aria-label="Permalink to &quot;空间维：全方位管理&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">管理维度</p><p>缺陷管理 · 文档管理 · 配置管理 · 评审管理 · 质量管理 · 回归管理</p></div><h3 id="组织维-人员管理" tabindex="-1">组织维：人员管理 <a class="header-anchor" href="#组织维-人员管理" aria-label="Permalink to &quot;组织维：人员管理&quot;">​</a></h3><p>构建从测试人员、测试小组到测试机构的多层次组织管理模式</p><hr><h2 id="_19-软件测试的历史演进" tabindex="-1">19. 软件测试的历史演进 <a class="header-anchor" href="#_19-软件测试的历史演进" aria-label="Permalink to &quot;19. 软件测试的历史演进&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">发展阶段</p><ol><li><strong>Debugging oriented</strong>（1950s）</li><li><strong>Demonstration oriented</strong>（1960s）</li><li><strong>Destruction oriented</strong>（1970s）</li><li><strong>Evaluation oriented</strong>（1980s）</li><li><strong>Prevention oriented</strong>（1990s）</li><li><strong>Professional, education and research</strong>（2000+）</li></ol></div><hr><h2 id="_20-软件测试的标准规范" tabindex="-1">20. 软件测试的标准规范 <a class="header-anchor" href="#_20-软件测试的标准规范" aria-label="Permalink to &quot;20. 软件测试的标准规范&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">国际标准</p><ul><li><strong>IEEE Test Standard</strong>: <a href="https://standards.ieee.org/search/?q=Software%20Systems&amp;type=Standard" target="_blank" rel="noreferrer">查看详情</a></li><li>ISO/IEC/IEEE International Standard - Software and systems engineering - Software testing -- Part 2: Test processes</li><li>IEEE/ISO/IEC 29119-1-2021 ISO/IEC/IEEE International Standard - Software and systems engineering --Software testing --Part 1:General concepts</li></ul></div><hr><h2 id="_21-解释软件的故障模型pie" tabindex="-1">21. 解释软件的故障模型PIE <a class="header-anchor" href="#_21-解释软件的故障模型pie" aria-label="Permalink to &quot;21. 解释软件的故障模型PIE&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">PIE模型细分</p><p>PIE模型对&quot;Bug&quot;一词做了专业细分：</p></div><h3 id="pie名称由来" tabindex="-1">PIE名称由来： <a class="header-anchor" href="#pie名称由来" aria-label="Permalink to &quot;PIE名称由来：&quot;">​</a></h3><ol><li><strong>Execution 执行</strong>：错误代码必须要被执行到</li><li><strong>Infection 感染</strong>：触发了错误的中间状态</li><li><strong>Propagation 传播</strong>：错误的中间状态必须传播到最终输出</li></ol><h3 id="三个层次" tabindex="-1">三个层次： <a class="header-anchor" href="#三个层次" aria-label="Permalink to &quot;三个层次：&quot;">​</a></h3><ul><li><strong>Fault</strong>：软件中存在的静态错误</li><li><strong>Error</strong>：由于Fault导致的内部状态错误</li><li><strong>Failure</strong>：不满足规格说明，用户可见的外部错误</li></ul>',93)])])}const _=l(h,[["render",d]]);export{q as __pageData,_ as default};
