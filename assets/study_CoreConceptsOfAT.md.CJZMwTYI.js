import{_ as i,c as t,o,a2 as s}from"./chunks/framework.ZQz07f7Q.js";const e="/assets/CyclicalityParallelism.DVx5CCz3.png",a="/assets/Vmodel.Bxa4EqsK.png",r="/assets/Wmodel.v9uNgXAr.png",p="/assets/Xmodel.PHObl08d.png",n="/assets/SEprocess.JKtwJoBN.png",f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"study/CoreConceptsOfAT.md","filePath":"study/CoreConceptsOfAT.md","lastUpdated":null}'),u={name:"study/CoreConceptsOfAT.md"};function c(d,l,g,m,_,E){return o(),t("div",null,[...l[0]||(l[0]=[s('<ol><li>什么是软件质量</li></ol><p><strong>软件质量</strong>是一个包含多个属性的，可度量的多维度的量，其中有些属性比另外一些属性重要。</p><ul><li>分为静态质量属性和动态质量属性</li></ul><ol start="2"><li>什么是软件缺陷？它具有哪些危害，如何管理？</li></ol><ul><li>软件缺陷的定义： <ol><li>软件未达到产品说明书中已经标明的功能</li><li>软件出现了产品说明书中指明不会出现的错误</li><li>软件未达到产品说明书中虽为指出但应当达到的目标</li><li>软件功能超出了产品说明书中指明的范围</li><li>软件测试人员认为软件难以理解、不易使用，或者最终用户认为该软件使用效果不良</li></ol></li><li>软件缺陷修复的代价：随着整个开发过程的时间推移，更正缺陷或修复问题的费用呈<strong>几何级数增长</strong>。</li><li>管理 <ol><li>缺陷预防</li><li>缺陷发现（软件测试的目的）</li><li>缺陷记录和报告</li><li>缺陷分类和跟踪</li><li>缺陷处理</li><li>缺陷预测</li></ol></li></ul><ol start="3"><li>什么是软件测试</li></ol><p>软件测试的定义：（其中之一）使用人工或自动的手段来运行或测定某个软件系统的过程，其目的在于检验软件是否满足规定的需求或弄清预期结果和实际结果之间的差别</p><p>测试是一个或多个测试用例的结合。测试活动有两种结果：找出缺陷和故障，或显示软件执行正确。</p><ol start="4"><li>测试的普遍性</li></ol><p>在各个领域都需要测试：Shopping, Education, Produce, Social communication, Academic, Industrial。教育、建筑、制造业、软件、农业、各行各业</p><ol start="5"><li>软件测试的种类</li></ol><ul><li>按照软件测试用例的设计方法而论：白盒测试（10）和黑盒测试（6）</li><li>按照软件测试的策略和过程来分类：单元测试、集成测试、系统测试、验证测试和确认测试</li><li>不同阶段的测试（9）</li><li>不同应用软件的测试（20）</li><li>不同测试技术（30+）</li><li>不同方面测试（30+）</li></ul><ol start="6"><li>软件测试的关键问题是什么？</li></ol><p>软件生命周期：制定计划、需求分析定义、软件设计、程序编码、软件测试、软件运行、软件维护、软件停用等8个阶段</p><p>包括四个方面：测试由谁来执行，测试什么，什么时候进行测试，怎样进行测试</p><ol start="7"><li>软件测试的对象是什么</li></ol><p>软件开发过程中所产生的需求规格说明、概要设计规格说明、详细设计规格说明以及源程序都是软件测试的对象</p><ol start="8"><li>软件测试的停止准则有哪些</li></ol><p>第一类标准：测试超过了预期时间</p><p>第二类标准：执行了所有的测试用例，但并没有发现故障</p><p>第三类标准：使用特定的测试用例设计方案作为判断测试停止的基础</p><p>第四类标准：正面指出停止测试的具体要求，即停止测试的标准可定义为查出某一预定数目的故障</p><p>第五类标准：根据单位时间内查出故障的数量决定是否停止测试</p><ol start="9"><li>软件测试的周期性和并行性</li></ol><ul><li>周期性：测试-改错-再测试-再改错</li></ul><p><img src="'+e+'" alt="软件测试的周期性"></p><ol start="10"><li>软件测试的目的、意义和原则</li></ol><ul><li>目的 <ul><li>测试时程序的执行过程，目的在于发现错误；不能证明程序的正确性，除非仅处理有限种情况</li><li>检查系统是否满足需求</li></ul></li><li>意义 <ul><li>对消费者而言</li><li>对生产者而言</li></ul></li></ul><ol start="11"><li>软件测试的未来发展趋势</li></ol><p>软件测试自动化，测试技术智能化，测试方法工具化，测试工具服务化，测试理论系统化，测试手段多样化，测试过程标准化，测试人员专业化，测试部门独立化，测试管理全面化，测试对象精细化</p><ol start="12"><li>软件测试在软件工程中的位置（在若干开发模型中）</li></ol><p>软件开发模型中的软件测试</p><ol><li><p>大棒开发法</p></li><li><p>边写边改法</p></li><li><p>瀑布法</p></li><li><p>快速原型法</p></li><li><p>螺旋模式法</p></li><li><p>敏捷开发模式</p></li><li><p>软件测试的模型</p></li></ol><ul><li>V模型</li></ul><p><img src="'+a+'" alt="V模型"></p><ul><li>W模型</li></ul><p><img src="'+r+'" alt="W模型"></p><ul><li>X模型</li></ul><p><img src="'+p+'" alt="X模型"></p><ol start="14"><li>软件测试的过程（测试信息流程）</li></ol><p><img src="'+n+'" alt="测试信息流程"></p><ol start="15"><li>软件测试的研究</li></ol><ul><li>2000 FSE</li><li>2007 FSE</li><li>2014 Changhai Nie</li></ul><ol start="16"><li>软件测试作为一种职业和作为一种科学</li></ol><p>测试员应具备的素质：探索精神，故障排除能手，不懈努力，创造性，追求完美，判断准确，老练稳重，说服力</p><ol start="17"><li>软件测试的工具</li></ol><ul><li>测试管理工具</li><li>自动化功能测试工具</li><li>性能测试工具</li><li>单元测试工具</li><li>白盒测试工具</li><li>测试用例设计工具</li></ul><ol start="18"><li>软件测试的管理</li></ol><ul><li>时间维：全过程管理，对软件测试项目的全设计进行控制 <ul><li>测试计划管理</li><li>测试设计管理</li><li>测试执行管理</li><li>测试结果管理</li></ul></li><li>空间维：全方位管理，对与软件质量有关的关键因素实施全方位管理，具体包括缺陷管理、文档管理、配置管理、评审管理、质量管理和回归管理等</li><li>组织维：人员管理，构建从测试人员、测试小组到测试机构的多层次的组织管理模式</li></ul><ol start="19"><li>软件测试的历史</li></ol><ul><li>Debugging oriented（1950年左右）</li><li>Demonstration oriented（1960左右）</li><li>Destruction oriented（1970左右）</li><li>Evaluation oriented（1980左右）</li><li>Prevention oriented（1990左右）</li><li>Professional、education and research（2000以后）</li></ul><ol start="20"><li>软件测试的标准</li></ol><ul><li><strong>IEEE Test Standard</strong>: <a href="https://standards.ieee.org/search/?q=Software%20Systems&amp;type=Standard" target="_blank" rel="noreferrer">https://standards.ieee.org/search/?q=Software%20Systems&amp;type=Standard</a></li><li>ISO/IEC/IEEE International Standard - Software and systems engineering - Software testing -- Part 2: Test processes</li><li>IEEE/ISO/IEC 29119-1-2021 ISO/IEC/IEEE International Standard - Software and systems engineering --Software testing --Part 1:General concepts</li></ul><ol start="21"><li>解释软件的故障模型PIE</li></ol><p>PIE模型对于软件测试日常笼统说的Bug一词做了细分：</p><ul><li>Fault：软件中存在的静态错误</li><li>Error：由于Fault导致的内部状态的错误</li><li>Failure：不满于规格说明，用户可见的外部错误</li></ul><p>PIE名字的由来：</p><ul><li>Execution 执行：错误代码必须要被执行到</li><li>Infection 感染：出发了错误的中间状态</li><li>Propagation 传播：错误的中间状态必须可以传播到最后的输出使得可以被观测到</li></ul>',58)])])}const I=i(u,[["render",c]]);export{f as __pageData,I as default};
